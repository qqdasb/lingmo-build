name: Build LingmoOS Arm64

on:
    # Triggers the workflow on push or pull request events but only for the "main" branch
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]
  
    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu_devel
    steps:   
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        - uses: actions/checkout@v3
        
        - uses: uraimo/run-on-arch-action@v2
          name: Build artifact
          id: build
          with:
            arch: ${{ matrix.arch }}
            distro: ${{ matrix.distro }}

            # Not required, but speeds up builds
            githubToken: ${{ github.token }}

            # Create an artifacts directory
            # setup: |
            #   mkdir -p "${PWD}/artifacts"

            # Mount the artifacts directory as /artifacts in the container
            dockerRunArgs: |
              --volume "${PWD}/:/lingmoos"

            # Pass some environment variables to the container
            # env: | # YAML, but pipe character is necessary
            #   artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

            # The shell to run commands with in the container
            shell: /bin/bash

            # Install some dependencies in the container. This speeds up builds if
            # you are also using githubToken. Any dependencies installed here will
            # be part of the container image that gets cached, so subsequent
            # builds don't have to re-install them. The image layer is cached
            # publicly in your project's package repository, so it is vital that
            # no secrets are present in the container state or logs.
            install: |
              apt-get update -y
              apt-get install -y equivs curl git devscripts lintian build-essential automake autotools-dev cmake g++

            # Produce a binary artifact and place it in the mounted volume
            run: |
              cd /lingmoos
              echo 24 | bash build-github-arm.sh

        - name: Zip built files
          run: tar -zcvf BuiltDeb.tar.gz ./LingmoSrcBuild/Deb

        - uses: actions/upload-artifact@v4
          with:
            name: LingmoOS Arm64 Built
            path: BuiltDeb.tar.gz
            compression-level: 9 # maximum compression
